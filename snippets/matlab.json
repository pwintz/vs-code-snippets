{
	// Place your snippets for matlab here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Formatted Print": {
		"prefix": "fprintf",
		"body": [
			"fprintf('$1\\n', $2);"
		]
	}, 
	"Float format specification": {
		"prefix": ["%f"],
		"body": "%${1:width}.${2:precision}${3|f,g,e|}"
	},
	// ╭──────────────────────────────────────────╮
	// │ ╭──────────────────────────────────────╮ │
	// │ │             Logical Flow             │ │
	// │ ╰──────────────────────────────────────╯ │
	// ╰──────────────────────────────────────────╯
	"If variable does not exist": {
		"prefix": ["ifNotExists", "ifVarNotExist"],
		"body": [
			"if ~exist(\"${1:variable name}\", \"var\")",
			"\t$0",
			"end"
		],
		"description": ""
	},
	// ╭───────────────────────────────────────────────╮
	// │ ╭───────────────────────────────────────────╮ │
	// │ │             Writing Functions             │ │
	// │ ╰───────────────────────────────────────────╯ │
	// ╰───────────────────────────────────────────────╯
	"Function Arguments": {
		"prefix": ["functionArgumentsBlock"],
		"body": [
			"% Function signature should be like: myFunction(<positional arguments>, options)", 
			"arguments",
				"\t${1:functionArgument}",
			"end"

		],
	},
	"Function Argument (Scalar)": {
		"prefix": ["functionArgument double"],
		"body": [
			"options.${1:name} (1, 1) double = ${2:default}"
		],
	},
	"Function Argument (Vector)": {
		"prefix": ["functionArgument vector"],
		"body": [
			"options.${1:name} (${2:rows}, ) double = ${3:default}"
		],
	},
	"Function Argument (Array)": {
		"prefix": ["functionArgument array", "functionArgument matrix"],
		"body": [
			"options.${1:name} (${2:rows}, ${3:cols}) double = ${4:default}"
		],
	},
	"Function Argument (String)": {
		"prefix": ["functionArgument double"],
		"body": [
			"options.${1:name} (1, 1) string = \"${2:default}\""
		],
	},
	"Function Argument (Object)": {
		"prefix": ["functionArgument object"],
		"body": [
			"options.${1:name} (1, 1) ${2:type}"
		],
	},
	"Name-value function arguments parsing (Old)": {
		"prefix": ["\\parseArgs", "\\argumentParser"],
		"body": [
			"% Parse inputs from varargin argument.",
			"p = inputParser;",
			"${1|addArgument|};",
			"parse(p, varargin{:});",
			"args = p.Results;"
		],
		"description": ""
	},
	"addArgument": {
		"prefix": ["addArgument"],
		"body": [
			"${1|addRequired,addOptional,addParameter|}$2;",
			"${3:addArgument}"
		],
		"description": ""
	},
	"Add required function argument": {
		"prefix": ["addRequired"],
		"body": [
			"addRequired(p, \"${1:argName}\"${3:, validationFcn})"
		],
	},
	"Add optional positional function argument": {
		"prefix": ["addOptional"],
		"body": [
			"addOptional(p, \"${1:argName}\", ${2:defaultValue}${3:, validationFcn})"
		],
	},
	"Add name-value function parameter": {
		"prefix": ["addParameter"],
		"body": [
			"addParameter(p, \"${1:argName}\", ${2:defaultValue}${3:, validationFcn})"
		],
	},
	"validationFcn": {
		"prefix": ["validationFcn"],
		"body": [
			"${1|@isstring,@(x)isnumeric(x)&&isscalar(x),iscell,@(obj)isa(obj\\,\"classname\")|}"
		],
		"description": ""
	}, 
	// ╭─────────────────────────────────────────────╮
	// │             Function Validation             │
	// ╰─────────────────────────────────────────────╯
	"Numeric Argument Validators": {
		"prefix": ["numericValidator"],
		"body": "${1|mustBePositive,mustBeNonpositive,mustBeNonnegative,mustBeNegative,mustBeFinite,mustBeNonNan,mustBeNonzero,mustBeNonsparse,mustBeSparse,mustBeReal,mustBeInteger,mustBeNonmissing,mustBeNumeric,mustBeNumericOrLogical,mustBeFloat|}"
	},
	"Comparison Argument Validators": {
		"prefix": ["comparisonValidators"],
		"body": [
			"${1|mustBeGreaterThan,mustBeLessThan,mustBeGreaterThanOrEqual,mustBeLessThanOrEqual|}(${2:property name}, ${3:value})"
		],
	},
	"Range Argument Validator": {
		"prefix": ["rangeValidator"],
		"body": [
			"mustBeBetween(${1:property name}, ${2:lower}, ${3:upper})"
		],
	}, 
	"Membership Argument Validators": {
		"prefix": ["membershipValidators"],
		"body": [
			"mustBeMember(${2:property name}, ${3:S})"
		],
		"description": ""
	},
	"Data Type Argument Validators": {
		"prefix": ["dataTypeValidators"],
		"body": [
			"${1|mustBeA,mustBeUnderlyingType|}(${2:property name}, ${3:typeName})"
		],
	},
	"Size Argument Validators": {
		"prefix": ["sizeValidators", "shapeValidators"],
		"body": [
			"${1|mustBeNonempty,mustBeScalarOrEmpty,mustBeVector,mustBeRow,mustBeColumn,mustBeMatrix|}(${2:property name})"
		],
	},
	"Number of Output Arguments": {
		"prefix": ["nargout", "numberOfOutputArguments"],
		"body": [
			"nargout($1)"
		],
	},
	"Number of Input Arguments": {
		"prefix": ["nargin", "numberOfInputArguments"],
		"body": [
			"nargin($1)"
		],
	},
	// ╭───────────────────────────────────────────────╮
	// │ ╭───────────────────────────────────────────╮ │
	// │ │             Class Definitions             │ │
	// │ ╰───────────────────────────────────────────╯ │
	// ╰───────────────────────────────────────────────╯
	"Handle class definition": {
		"prefix": ["classdef"],
		"body": [
			"classdef ${1:class name} < handle", 
			"\t",
			"\tproperties(Constant)",
			"\t\t% Define class constants.",
			"\t\t",
			"\tend", 
			"\tproperties(SetAccess = immutable)",
			"\t\t% Define instance constants.",
			"\t\t",
			"\tend", 
			"\tproperties",
			"\t\t% Define instance variables.",
			"\t\t",
			"\tend", 
			"\tmethods",
			"\t\t",
			"\t\t% Constructor",
      "\t\tfunction this = ${1:class name}()",
      "\t\t\t",
			"\t\tend",
        
			"\tend", 
			"end"
		]
	},
	"Call superclass constructor": {
		"prefix": ["superclassConstructor"],
		"body": [
			"${1:this} = ${1:this}@${2:superclassName}(${3:superclassArgs});"
		],
		"description": ""
	},
	"Property setter": {
		"prefix": ["setter", "propertySetter"],
		"body": [
			"function set.${1:property_name}(this, ${1:property_name})",
				"\tthis.${1:property_name} = ${1:property_name};",
			"end",
		],
		"description": ""
	},
	// ╭──────────────────────────────────────╮
	// │ ╭──────────────────────────────────╮ │
	// │ │             Plotting             │ │
	// │ ╰──────────────────────────────────╯ │
	// ╰──────────────────────────────────────╯
	"Named Figure": {
		"prefix": ["figure(name=)", "named figure"],
		"body": [
			"pwintz.utils.namedFigure(\"${1:name}\");"
			// "figure('name','$1'${2:, NumberTitle='off'});",
			// "clf"
		],
		"description": "Create a named MATLAB figure. Use NumberTitle='off' to omit the figure number from the title."
	},
	"Plot 2D": {
		"prefix": ["plot2D"],
		"body": [
			"plot(${1:x-values}, ${2:y-values}, '${3|-,:,.-,--|}${4|b,r,k,g|}');"
		],
	},
	"Plot Horizontal Line": {
		"prefix": ["plotHorizontalLine2D"],
		"body": [
			"plot(${1:x-values}, ${2:height} * [1, 1], '${3|-,:,.-,--|}${4|b,r,k,g|}');"
		],
	},
	"Logarithmic Scale Y-Axis": {
		"prefix": ["logScaleY", "yAxisLogarithmic"],
		"body": [
			"set(ax, 'YScale', 'log')"
		],
		"description": ""
	},
	// ╭────────────────────────────────────────╮
	// │ ╭────────────────────────────────────╮ │
	// │ │             Test Cases             │ │
	// │ ╰────────────────────────────────────╯ │
	// ╰────────────────────────────────────────╯
	"Test Case Function": {
		"prefix": ["testCase"],
		"body": [
			"function test_${1:componentName}_${2:description}(testCase)", 
				"\t% ⋘────────── Setup ───────────⋙",
				"\t$3",
				"\t% ⋘────────── Execute ─────────⋙",
				"\tw$4",
				"\t% ⋘────────── Verify ──────────⋙",
				"\ttestCase.fail()$0",
			"end"
		],
		"description": ""
	},
	// ╭──────────────────────────────────────────╮
	// │ ╭──────────────────────────────────────╮ │
	// │ │             HyEQ Toolbox             │ │
	// │ ╰──────────────────────────────────────╯ │
	// ╰──────────────────────────────────────────╯
	// ╭─────────────────────────────────────────────╮
	// │             Hybrid Plot Builder             │
	// ╰─────────────────────────────────────────────╯
	"Hybrid Plot Builder Figure": {
		"prefix": "hpbFigure",
		"body": [
			"figure($1);",
			"clf",
			"hpb = HybridPlotBuilder().title($2);",
			"hpb.${3|plotFlows,plotJumps,plotPhase|}($4);"
		]
	}, 
	// ╭────────────────────────────────────╮
	// │             Hybrid Arc             │
	// ╰────────────────────────────────────╯
	// ⋘────────── Transform ──────────⋙
	"Transform Hybrid Arc": {
		"prefix": [".transform"],
		"body": [
			".transform(@(x, t, j) $1)"
		],
	},
}